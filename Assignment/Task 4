--1 Write an SQL query to calculate the average number of students enrolled in each course.
--Use aggregate functions and subqueries to achieve this.

/*SELECT AVG(course_count) AS average_students
FROM (
    SELECT COUNT(e.student_id) AS course_count
    FROM Enrollments e
    GROUP BY e.course_id
) AS course_enrollment_counts;*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--2 Identify the student(s) who made the highest payment. 
--Use a subquery to find the maximum payment amount and then retrieve the student(s) associated with that amount.

/*SELECT s.first_name, s.last_name
FROM Students s
JOIN Payments p ON s.student_id = p.student_id
WHERE p.amount = (SELECT MAX(amount) FROM Payments);*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--3 Retrieve a list of courses with the highest number of enrollments.
--Use subqueries to find the course(s) with the maximum enrollment count.

/*SELECT c.course_name
FROM Courses c
WHERE c.course_id = (
    SELECT TOP 1 course_id
    FROM Enrollments
    GROUP BY course_id
    ORDER BY COUNT(*) DESC
);*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--4 Calculate the total payments made to courses taught by each teacher.
--Use subqueries to sum payments for each teacher's courses.

/*SELECT t.first_name, t.last_name, SUM(p.amount) AS total_payments
FROM Teacher t
JOIN Courses c ON t.teacher_id = c.teacher_id
JOIN Payments p ON p.student_id IN (SELECT student_id FROM Enrollments WHERE course_id = c.course_id)
GROUP BY t.teacher_id, t.first_name, t.last_name;*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--5 Identify students who are enrolled in all available courses. 
--Use subqueries to compare a student's enrollments with the total number of courses.

/*SELECT s.first_name, s.last_name
FROM Students s
WHERE (SELECT COUNT(*) FROM Courses) = (
    SELECT COUNT(*) FROM Enrollments e WHERE e.student_id = s.student_id
);*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--6 Retrieve the names of teachers who have not been assigned to any courses. 
--Use subqueries to find teachers with no course assignments.

/*SELECT t.first_name, t.last_name
FROM Teacher t
WHERE t.teacher_id NOT IN (SELECT c.teacher_id FROM Courses c);*/


/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--7 Calculate the average age of all students. 
--Use subqueries to calculate the age of each student based on their date of birth.

/*SELECT AVG(DATEDIFF(YEAR, date_of_birth, GETDATE())) AS average_age
FROM Students;*/


/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--8 . Identify courses with no enrollments. Use subqueries to find courses without enrollment records.

/*SELECT c.course_name
FROM Courses c
WHERE NOT EXISTS (
    SELECT 1 FROM Enrollments e WHERE e.course_id = c.course_id
);*/



/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--9 Calculate the total payments made by each student for each course they are enrolled in. 
--Use subqueries and aggregate functions to sum payments

/*SELECT e.student_id, e.course_id, 
       (SELECT SUM(p.amount) 
        FROM Payments p 
        WHERE p.student_id = e.student_id) AS total_payment
FROM Enrollments e;*/


/*-------------------------------------------------------------------------------------------------------------------------------------------*/


--10  Identify students who have made more than one payment.
--Use subqueries and aggregate functions to count payments per student and filter for those with counts greater than one

/*SELECT student_id
FROM Payments
GROUP BY student_id
HAVING COUNT(payment_id) > 1;*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--11 Write an SQL query to calculate the total payments made by each student. 
--Join the "Students" table with the "Payments" table and use GROUP BY to calculate the sum of payments for each student.

/*SELECT student_id, SUM(amount) AS total_payments
FROM Payments
GROUP BY student_id;*/

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--12 Retrieve a list of course names along with the count of students enrolled in each course. 
--Use JOIN operations between the "Courses" table and the "Enrollments" table and GROUP BY to count enrollments.

/*SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;*/


/*-------------------------------------------------------------------------------------------------------------------------------------------*/

--13 Calculate the average payment amount made by students. 
--Use JOIN operations between the "Students" table and the "Payments" table and GROUP BY to calculate the average

/*SELECT AVG(amount) AS average_payment
FROM Payments;*/
